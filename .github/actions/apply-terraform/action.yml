name: 'Apply Terraform configuration'
description: 'Create or update the Azure infrastructure using Terraform'
inputs:
  azure_credentials:
    description: 'Azure Credentials, stored in a secret on your GitHub repository, generated by https://github.com/microsoft/NubesGen/blob/main/docs/gitops-quick-start.md'
    required: true
  tf_storage_account:
    description: 'Terraform storage account name, stored in a secret on your GitHub repository, generated by https://github.com/microsoft/NubesGen/blob/main/docs/gitops-quick-start.md'
    required: true
  resource_group_name:
    description: 'Name of the Azure resource group, that will be used to store the Terraform storage account.'
    required: false
    default: 'rg-terraform-001'
  container_registry_name:
    description: 'Container registry name, stored in a secret on your GitHub repository'
    required: true
  auth0_issuer_base_url:
    description: 'Auth0 issuer base URL, stored in a secret on your GitHub repository'
    required: true
  auth0_ci_client_id:
    description: 'Auth0 CI client ID, stored in a secret on your GitHub repository'
    required: true
  auth0_ci_client_secret:
    description: 'Auth0 CI client secret, stored in a secret on your GitHub repository'
    required: true
outputs: 
  application_name:
    description: 'Name of the application'
    value: ${{ steps.terraform-output.outputs.application_name }}
  application_url: 
    description: 'URL of the application'
    value: ${{ steps.terraform-output.outputs.application_url }}
  resource_group: 
    description: 'Resource group name where the resources have been deployed'
    value: ${{ steps.terraform-output.outputs.resource_group }}
  container_registry_name: 
    description: 'The Container registry name that have has deployed'
    value: ${{ steps.terraform-output.outputs.container_registry_name }}
  spring_apps_service_name: 
    description: 'Azure Spring Apps service name'
    value: ${{ steps.terraform-output.outputs.spring_apps_service_name }}
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set environment variables
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/*/}
        echo "ENVIRONMENT=${TAG_NAME:4}" >> $GITHUB_ENV
        echo "ARM_CLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r .clientId)" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r .subscriptionId)" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r .tenantId)" >> $GITHUB_ENV
      shell: bash
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ inputs.azure_credentials }}   
    - name: Authorize local IP to access the Storage Account
      uses: azure/CLI@v2
      env:
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
      with:
        azcliversion: 2.58.0
        inlineScript: |
          az storage account update --name $TF_STORAGE_ACCOUNT --default-action Allow
          sleep 10
    - name: Initialize Terraform
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        for i in {1..30}; do terraform init \
        -input=false \
        -backend-config="resource_group_name=${{ inputs.resource_group_name }}" \
        -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT" \
        -backend-config="container_name=tfstate" \
        -backend-config="key=$ENVIRONMENT.terraform.tfstate" \
        && break || sleep 10; done
      shell: bash
      working-directory: '${{ github.workspace }}/terraform'
    - name: Apply Terraform
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
        CONTAINER_REGISTRY_NAME: ${{ inputs.container_registry_name }}
        AUTH0_ISSUER_BASE_URL: ${{ inputs.auth0_issuer_base_url }}
        AUTH0_CI_CLIENT_ID: ${{ inputs.auth0_ci_client_id }}
        AUTH0_CI_CLIENT_SECRET: ${{ inputs.auth0_ci_client_secret }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        terraform apply \
        -input=false \
        -auto-approve \
        -var="terraform_storage_account=$TF_STORAGE_ACCOUNT" \
        -var="environment=$ENVIRONMENT" \
        -var="container_registry_name=$CONTAINER_REGISTRY_NAME" \
        -var="container_registry_username=$ARM_CLIENT_ID" \
        -var="container_registry_password=$ARM_CLIENT_SECRET" \
        -var="auth0_issuer_base_url=$AUTH0_ISSUER_BASE_URL" \
        -var="auth0_ci_client_id=$AUTH0_CI_CLIENT_ID" \
        -var="auth0_ci_client_secret=$AUTH0_CI_CLIENT_SECRET"
      shell: bash
      working-directory: '${{ github.workspace }}/terraform'
    - name: Get output data from Terraform
      id: terraform-output
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        echo $(terraform output -json) > terraform-output.json
        echo "application_name=$(jq -r .application_name.value terraform-output.json)" >> $GITHUB_OUTPUT
        echo "application_url=$(jq -r .application_url.value terraform-output.json)" >> $GITHUB_OUTPUT
        echo "resource_group=$(jq -r .resource_group.value terraform-output.json)" >> $GITHUB_OUTPUT
      working-directory: '${{ github.workspace }}/terraform'
      shell: bash
    - name: Disable local IP access to the Storage Account
      uses: azure/CLI@v2
      env:
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
      with:
        azcliversion: 2.58.0
        inlineScript: |
          az storage account update --name $TF_STORAGE_ACCOUNT --default-action Deny